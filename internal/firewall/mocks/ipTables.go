// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	iptables "k8s.io/kubernetes/pkg/util/iptables"
)

// IpTables is an autogenerated mock type for the ipTables type
type IpTables struct {
	mock.Mock
}

// EnsureChain provides a mock function with given fields: table, chain
func (_m *IpTables) EnsureChain(table iptables.Table, chain iptables.Chain) (bool, error) {
	ret := _m.Called(table, chain)

	var r0 bool
	if rf, ok := ret.Get(0).(func(iptables.Table, iptables.Chain) bool); ok {
		r0 = rf(table, chain)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(iptables.Table, iptables.Chain) error); ok {
		r1 = rf(table, chain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnsureRule provides a mock function with given fields: position, table, chain, args
func (_m *IpTables) EnsureRule(position iptables.RulePosition, table iptables.Table, chain iptables.Chain, args ...string) (bool, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, position, table, chain)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(iptables.RulePosition, iptables.Table, iptables.Chain, ...string) bool); ok {
		r0 = rf(position, table, chain, args...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(iptables.RulePosition, iptables.Table, iptables.Chain, ...string) error); ok {
		r1 = rf(position, table, chain, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreAll provides a mock function with given fields: data, flush, counters
func (_m *IpTables) RestoreAll(data []byte, flush iptables.FlushFlag, counters iptables.RestoreCountersFlag) error {
	ret := _m.Called(data, flush, counters)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, iptables.FlushFlag, iptables.RestoreCountersFlag) error); ok {
		r0 = rf(data, flush, counters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
